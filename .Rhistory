# model_fit_prophet = prophet_boost() %>%
#     set_engine("prophet_xgboost") %>%
#     set_mode("regression") %>%
#     fit(Close~.,data=train_data)
#
# save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,model_fit_prophet,file="models.RData")
recursive_ensemble_panel <- modeltime_table(
model_fit_glmnet
,model_fit_xgboost
,model_fit_rf
#,model_fit_arima_boost
# ,model_fit_svm
#,model_fit_prophet
) %>%
ensemble_weighted(loadings = c(4, 4, 4)) %>%
recursive(
transform  = lag_transformer_grouped,
train_tail = panel_tail(train_data, Symbol, MONTHS_OF_TRAINING),
id         = "Symbol"
)
recursive_ensemble_panel
model_tbl <- modeltime_table(
recursive_ensemble_panel
)
model_tbl
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
df
m4_extended
nrow(m4_extended) - nrow(df)
505*7
train_data
future_data
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
tbl_res =  modeltime_forecast(model_tbl
new_data    = future_data,
tbl_res =  modeltime_forecast(model_tbl,
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
recursive_ensemble_panel <- modeltime_table(
model_fit_glmnet
,model_fit_xgboost
,model_fit_rf
#,model_fit_arima_boost
# ,model_fit_svm
#,model_fit_prophet
) %>%
ensemble_weighted(loadings = c(4, 4, 4)) %>%
recursive(
transform  = lag_transformer_grouped,
train_tail = panel_tail(train_data, Symbol, MONTHS_OF_TRAINING),
id         = "id"
)
recursive_ensemble_panel
model_tbl <- modeltime_table(
recursive_ensemble_panel
)
model_tbl
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
recursive_ensemble_panel <- modeltime_table(
model_fit_glmnet
,model_fit_xgboost
,model_fit_rf
#,model_fit_arima_boost
# ,model_fit_svm
#,model_fit_prophet
) %>%
ensemble_weighted(loadings = c(4, 4, 4)) %>%
recursive(
transform  = lag_transformer_grouped,
train_tail = panel_tail(train_data, Symbol, MONTHS_OF_TRAINING),
id         = "Symbol"
)
recursive_ensemble_panel
model_tbl <- modeltime_table(
recursive_ensemble_panel
)
model_tbl
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
predict(model_fit_xgboost,train_data)
preds = predict(model_fit_xgboost,future_data)
future_data
length(unique(future_data$Symbol))
length(unique(train_data$Symbol))
future_data %>% filter(Symbol=="CEG")
train_data %>% filter(Symbol=="CEG")
df %>% filter(Symbol=="CEG")
m4_lags %>% filter(Symbol=="CEG")
train_data
future_data = future_data %>% filter(Symbol=="CEG")
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
future_data
future_data <- m4_lags %>%
filter(is.na(Close))
future_data = future_data %>% filter(Symbol!="CEG")
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
tbl_res
unique(tbl_res$.key)
tbl_res %>% filter(.key=="prediction")
ggplot(tbl_res %>% filter(Symbol=="AAPL"),aes(
x=Date,
y=.value,
color=.key
)
) + geom_line()
ggplot(tbl_res %>% filter(Symbol=="MSFT"),aes(
x=Date,
y=.value,
color=.key
)
) + geom_line()
ggplot(tbl_res %>% filter(Symbol=="TSLA"),aes(
x=Date,
y=.value,
color=.key
)
) + geom_line()
tbl_res$Symbol %>% head()
df$Symbol %>% head()
library(tidyquant)
SP500 <- tq_index("SP500")
StockList <- SP500$symbol
StockList = str_replace(StockList,"\\.","-")
df <- tq_get(StockList)
df = rename(df,Symbol=symbol, Date=date, Open=open, 'Adjusted Close'= adjusted, Close=close, High=high, Volume=volume, Low=low)
write_csv(df,"sp500_stocks.csv")
library(modeltime.ensemble)
library(modeltime)
library(tidymodels)
library(earth)
library(glmnet)
library(xgboost)
library(tidyverse)
library(lubridate)
library(timetk)
library(zoo)
df = read_csv("sp500_stocks.csv")
df = na.omit(df)
df = df %>% select(-c(`Adj Close`,High,Low,Open,Volume))
df
df = df %>% select(-c(`Adjusted Close`,High,Low,Open,Volume))
library(modeltime.ensemble)
library(modeltime)
library(tidymodels)
library(earth)
library(glmnet)
library(xgboost)
library(tidyverse)
library(lubridate)
library(timetk)
library(zoo)
df = read_csv("sp500_stocks.csv")
df = na.omit(df)
df = df %>% select(-c(`Adjusted Close`,High,Low,Open,Volume))
FORECAST_HORIZON <- 7
MONTHS_OF_TRAINING <- 40
m4_extended <- df %>%
group_by(Symbol) %>%
future_frame(
.length_out = FORECAST_HORIZON,
.bind_data  = TRUE
) %>%
ungroup()
lag_transformer_grouped <- function(data){
data %>%
group_by(Symbol) %>%
tk_augment_lags(Close, .lags = 1:MONTHS_OF_TRAINING) %>%
ungroup()
}
m4_lags <- m4_extended %>%
lag_transformer_grouped()
m4_lags %>% tail(MONTHS_OF_TRAINING+1)
train_data <- m4_lags %>%
drop_na()
future_data <- m4_lags %>%
filter(is.na(Close))
model_fit_glmnet <- linear_reg(penalty = 1) %>%
set_engine("glmnet") %>%
fit(Close ~ ., data = train_data)
model_fit_xgboost <- boost_tree("regression", learn_rate = 0.35) %>%
set_engine("xgboost") %>%
fit(Close ~ ., data = train_data)
model_fit_rf = decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression") %>%
fit(Close ~ .,data=train_data)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,file="models.RData")
model_fit_arima_boost = arima_boost() %>%
set_engine("auto_arima_xgboost") %>%
set_mode("regression") %>%
fit(Close~.,data=train_data)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,file="models.RData")
# model_fit_svm = svm_linear() %>%
#     set_engine(engine="kernlab") %>%
#     set_mode(mode="regression") %>%
#     fit(Close~.,data=train_data)
#
# save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,file="models.RData")
#
model_fit_prophet = prophet_boost() %>%
set_engine("prophet_xgboost") %>%
set_mode("regression") %>%
fit(Close~.,data=train_data)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,model_fit_prophet,file="models.RData")
recursive_ensemble_panel <- modeltime_table(
model_fit_glmnet
,model_fit_xgboost
,model_fit_rf
,model_fit_arima_boost
# ,model_fit_svm
,model_fit_prophet
) %>%
ensemble_weighted(loadings = c(4, 4, 4,4,4)) %>%
recursive(
transform  = lag_transformer_grouped,
train_tail = panel_tail(train_data, Symbol, MONTHS_OF_TRAINING),
id         = "Symbol"
)
recursive_ensemble_panel
model_tbl <- modeltime_table(
recursive_ensemble_panel
)
model_tbl
future_data = future_data %>% filter(Symbol!="CEG")
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
tbl_res %>% filter(.key=="prediction")
ggplot(tbl_res %>% filter(Symbol=="TSLA"),aes(
x=Date,
y=.value,
color=.key
)
) + geom_line()
recursive_ensemble_panel <- modeltime_table(
model_fit_glmnet
,model_fit_xgboost
,model_fit_rf
,model_fit_arima_boost
# ,model_fit_svm
,model_fit_prophet
) %>%
ensemble_weighted(loadings = c(4, 4, 0,4,4)) %>%
recursive(
transform  = lag_transformer_grouped,
train_tail = panel_tail(train_data, Symbol, MONTHS_OF_TRAINING),
id         = "Symbol"
)
recursive_ensemble_panel
model_tbl <- modeltime_table(
recursive_ensemble_panel
)
model_tbl
future_data = future_data %>% filter(Symbol!="CEG")
tbl_res = model_tbl %>%
modeltime_forecast(
new_data    = future_data,
actual_data = m4_lags,
keep_data   = TRUE
)
tbl_res %>% filter(.key=="prediction")
ggplot(tbl_res %>% filter(Symbol=="TSLA"),aes(
x=Date,
y=.value,
color=.key
)
) + geom_line()
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_prophet,file="models.RData")
shiny::runApp('crypto_bros')
runApp('crypto_bros')
runApp('crypto_bros')
library(tidyverse)
library(shiny)
library(DT)
library(OpenImageR)
library(rsconnect)
library(tidyquant)
library(shinyWidgets)
library(shinyjs)
library(shinycssloaders)
library(modeltime)
library(modeltime.ensemble)
library(timetk)
runApp('crypto_bros')
runApp('crypto_bros')
runApp('crypto_bros')
modeltime_list()[["tbl_res"]]
modeltime_list()
force(input)
force(session)
View(session)
`rlang::last_error()`
runApp('crypto_bros')
runApp('crypto_bros')
shiny::runApp('crypto_bros')
setwd("C:/Users/Doug/Downloads/crypto_bros")
runApp()
runApp()
load("models.RData")
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boostmodel_fit_prophet,file="models.Rdata")
library(modeltime.ensemble)
library(modeltime)
library(tidymodels)
library(earth)
library(glmnet)
library(xgboost)
library(tidyverse)
library(lubridate)
library(timetk)
library(zoo)
df = read_csv("sp500_stocks.csv")
df = na.omit(df)
df = df %>% select(-c(`Adjusted Close`,High,Low,Open,Volume))
FORECAST_HORIZON <- 7
MONTHS_OF_TRAINING <- 40
m4_extended <- df %>%
group_by(Symbol) %>%
future_frame(
.length_out = FORECAST_HORIZON,
.bind_data  = TRUE
) %>%
ungroup()
lag_transformer_grouped <- function(data){
data %>%
group_by(Symbol) %>%
tk_augment_lags(Close, .lags = 1:MONTHS_OF_TRAINING) %>%
ungroup()
}
m4_lags <- m4_extended %>%
lag_transformer_grouped()
m4_lags %>% tail(MONTHS_OF_TRAINING+1)
train_data <- m4_lags %>%
drop_na()
future_data <- m4_lags %>%
filter(is.na(Close))
model_fit_glmnet <- linear_reg(penalty = 1) %>%
set_engine("glmnet") %>%
fit(Close ~ ., data = train_data)
model_fit_xgboost <- boost_tree("regression", learn_rate = 0.35) %>%
set_engine("xgboost") %>%
fit(Close ~ ., data = train_data)
model_fit_rf = decision_tree() %>%
set_engine("rpart") %>%
set_mode("regression") %>%
fit(Close ~ .,data=train_data)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,file="models.RData")
model_fit_arima_boost = arima_boost() %>%
set_engine("auto_arima_xgboost") %>%
set_mode("regression") %>%
fit(Close~.,data=train_data)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,file="models.RData")
# model_fit_svm = svm_linear() %>%
#     set_engine(engine="kernlab") %>%
#     set_mode(mode="regression") %>%
#     fit(Close~.,data=train_data)
#
# save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,file="models.RData")
#
# model_fit_prophet = prophet_boost() %>%
#     set_engine("prophet_xgboost") %>%
#     set_mode("regression") %>%
#     fit(Close~.,data=train_data)
#save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,model_fit_prophet,file="models.RData")
recursive_ensemble_panel <- modeltime_table(
model_fit_glmnet
,model_fit_xgboost
,model_fit_rf
,model_fit_arima_boost
# ,model_fit_svm
,model_fit_prophet
) %>%
ensemble_weighted(loadings = c(4, 4, 0,4,4)) %>%
recursive(
transform  = lag_transformer_grouped,
train_tail = panel_tail(train_data, Symbol, MONTHS_OF_TRAINING),
id         = "Symbol"
)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,file="models.RData")
object.size(model_fit_arima_boost)
object.size(model_fit_glmnet)
object.size(mode_fit_rf)
object.size(model_fit_rf)
object.size(model_fit_xgboost)
model_fit_prophet = prophet_boost() %>%
set_engine("prophet_xgboost") %>%
set_mode("regression") %>%
fit(Close~.,data=train_data)
# model_fit_svm = svm_linear() %>%
#     set_engine(engine="kernlab") %>%
#     set_mode(mode="regression") %>%
#     fit(Close~.,data=train_data)
#
# save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,file="models.RData")
#
model_fit_prophet = prophet_boost() %>%
set_engine("prophet_xgboost") %>%
set_mode("regression") %>%
fit(Close~.,data=train_data)
# model_fit_svm = svm_linear() %>%
#     set_engine(engine="kernlab") %>%
#     set_mode(mode="regression") %>%
#     fit(Close~.,data=train_data)
#
# save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,file="models.RData")
#
model_fit_prophet = prophet_boost() %>%
set_engine("prophet_xgboost") %>%
set_mode("regression") %>%
fit(Close~.,data=train_data)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,model_fit_arima_boost,model_fit_svm,model_fit_prophet,file="models.RData")
object.size(model_fit_prophet)
save(model_fit_glmnet,model_fit_xgboost,model_fit_rf,file="models.RData")
load("models.RData")
load("models.RData")
library(shiny); runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
load("models.RData")
runApp('app_missingmodels.R')
setwd("C:/Users/Doug/Downloads/crypto_bros")
library(shiny); runApp('app_missingmodels.R')
load("C:/Users/Doug/Downloads/crypto_bros/models.RData")
setwd("~/")
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
setwd("~/")
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
load("~/.RData")
load("~/.RData")
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
update.packages()
update.packages(ask = FALSE)
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('C:/Users/Doug/Downloads/crypto_bros/app_missingmodels.R')
df = read_csv("data/sp500_stocks.csv")
setwd("C:/Users/Doug/Downloads/crypto_bros")
df = read_csv("data/sp500_stocks.csv")
max(df$Date)
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
getwd()
R.version
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
runApp('app_missingmodels.R')
sessionInfo()
packageVersion("readr")
update.packages("readr")
packageVersion("readr")
install.packages("readr",version="1.3.9")
install.packages("readr", version = "1.3.9")
library(shiny); runApp('app_missingmodels.R')
install.packages("readr")
packageVersion("readr")
runApp('app_missingmodels.R')
install.packages("rlang")
install.packages("rlang")
library(shiny); runApp('app_missingmodels.R')
library(rsconnect)
rsconnect::configureApp("stock_exploration",size="xlarge")
